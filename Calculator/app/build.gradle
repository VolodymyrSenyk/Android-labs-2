apply plugin: "com.android.application"
apply from: "../versions.gradle"

android {
    compileSdkVersion versions.android.compileSdk
    buildToolsVersion versions.android.buildTools

    defaultConfig {
        applicationId "com.senyk.volodymyr.calculator"
        minSdkVersion versions.android.minSdk
        targetSdkVersion versions.android.targetSdk
        versionName "$versions.application.versionName (${getVersion()})"
        versionCode versions.application.versionCode
    }

    signingConfigs {
        debug {
            storeFile file('../keystore/debug.keystore')
            storePassword 'debugStorePass'
            keyAlias 'debug'
            keyPassword 'debugKeyPass'
        }

        release {
            storeFile file(getKeystoreProperty('releaseStoreFile'))
            storePassword getKeystoreProperty('releaseStorePassword')
            keyAlias getKeystoreProperty('releaseKeyAlias')
            keyPassword getKeystoreProperty('releaseKeyPassword')
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            debuggable true
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }
}

String getKeystoreProperty(String propertyName) {
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    if (keystoreProperties.containsKey(propertyName)) {
        return keystoreProperties[propertyName]
    } else if (System.getenv(propertyName) != null) {
        return System.getenv(propertyName)
    } else {
        throw new IllegalStateException("Keystore property not found: $propertyName")
    }
}

dependencies {
    // view
    implementation "androidx.appcompat:appcompat:$versions.androidx.appcompat"
    implementation "androidx.fragment:fragment:$versions.androidx.fragment"
    implementation "androidx.constraintlayout:constraintlayout:$versions.androidx.constraint"
    implementation "com.google.android.material:material:$versions.androidx.material"

    // di
    implementation "com.google.dagger:dagger:$versions.frameworks.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$versions.frameworks.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.frameworks.dagger"
    annotationProcessor "com.google.dagger:dagger-android-processor:$versions.frameworks.dagger"

    // lifecycle
    implementation "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"

    // rx
    implementation "io.reactivex.rxjava2:rxandroid:$versions.frameworks.rxandroid"
    implementation "io.reactivex.rxjava2:rxjava:$versions.frameworks.rxjava"
    implementation "com.vanniktech:rxpermission:$versions.frameworks.rxpermissions"

    // persistence
    implementation "androidx.room:room-runtime:$versions.frameworks.room"
    implementation "androidx.room:room-rxjava2:$versions.frameworks.room"
    annotationProcessor "androidx.room:room-compiler:$versions.frameworks.room"

    // script engine
    implementation "io.apisense:rhino-android:$versions.script_engine.rhino"
}
